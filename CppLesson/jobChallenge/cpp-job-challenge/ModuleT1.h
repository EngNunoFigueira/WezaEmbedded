#ifndef MODULET1_H
#define MODULET1_H

#include <cstdio>
#include <cstdlib> 
#include <ctime> 
#include <thread>
#include <string> 
#include <time.h>  
#include <iomanip>
#include <chrono>
#include <ctime>
#include <mutex> 
#include <algorithm>
#include <memory>
#include <vector>
#include <iostream>
#include <type_traits>

#include "ModuleT1.h"
#include "IModule.h"
#include "RandomByteGenerator.h"

/*-----------------------------------------------------------------------------------------------------------------------------------------------*
* Class ModuleT1, is the object we created to implement the principal TASK or functionality of this algorithm, as described on the document.     *
* This module will receive the data generated by a RANDOM BYTE GENERATOR and when the buffer is full the ModuleT1 delivery to ModuleT2           * 
* To avoid deadlock on INPUT BUFFER 2, the resource is protected by a Mutex shared between OBJCT1 and OBJT 2.                                    *
*                                                                                                                                                *
* AS CAN YOU TESTING THIS CODE IN SIMPLE WAY:                                                                                                    *                                
* So, the reality is that during the development period, we detected that is very hard generated 100 random char bytes and have exactly a sequence*
* as you ask for.                                                                                                                                *
* And we decide create or define a method called DATATESTING. This method provide 3 bytes arrays and one of them have the sequence 0x00,0x01,0x02*
* In file ModuleT1.cpp line we deinfe the following code:                                                                                        *
* line 32: byteArrays[nbytes] = _generator.TestData(arrayOrder,nbytes);  //_generator.getRandomByte();                                           *
* After testing the code please, uncomment the code in front of it and replace by the _generator.getRandomByte(). It is will enable the Random fc*
*                                                                                                                                                *
* Or you want keep testing, added new byte arrays in TESTDATA to observe other issues or performance.                                            *                      
*------------------------------------------------------------------------------------------------------------------------------------------------*/

class ModuleT1: public IModule
{
   public:
   ModuleT1( std::shared_ptr<std::vector<stData>> _bfIn , std::shared_ptr<std::vector<stData>> _bffIn, std::mutex & mtex );
   void Task();
   std::thread Run();

private:
  RandomByteGenerator _generator;
  std::mutex *_mutex=nullptr;
  unsigned int nbytes{0}, arrayOrder{0};
  unsigned char byteArrays [BYTE_ARRAY_SIZE]{};
};

#endif